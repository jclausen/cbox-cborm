<?xml version="1.0"?>
<project name="build" basedir="../" default="build">
	<!-- Version: UPDATE ON EACH RELEASE AS NEEDED -->
	<property name="project.name" 		value="cborm" />
	<property name="module.name" 		value="cborm" />
	<property name="project.version" 	value="1.3.0"/>
	<property name="groupID" 			value="ortussolutions" />
	
	<!-- Build Labels -->
	<tstamp prefix="start"/>
	<path id="cp">
		<fileset dir="workbench/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- Define Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
	<!-- Import Box-Repo Tasks -->
	<import><url url="https://raw.githubusercontent.com/Ortus-Solutions/box-tasks/master/box-repo.xml"/></import>
	
	<!-- Init -->
	<target name="init" description="Init Build" unless="src.isInit">
		<!-- Default environment check, if not passed via -Denvironment -->
		<condition property="environment" value="local">
			<not><isset property="environment" /></not>
		</condition>
		<if>
			<available file="workbench/build-${environment}.properties" />
			<then>
				<!-- Load env properties -->
				<echo>Loading properties from environment: ${environment}</echo>
				<loadproperties srcFile="workbench/build-${environment}.properties"/>
			</then>
		</if>
		<!-- Load root properties -->
		<echo>Loading base properties</echo>
		<loadproperties srcFile="workbench/build.properties"/>

		<!-- Build Number -->
		<propertyfile file="workbench/build.number" comment="Build Number for ANT. Edit not!">
			<entry key="build.number" 
					type="int" 
			     	operation="+"
					pattern="00000"
			     	default="1" />
		</propertyfile>
		<property file="workbench/build.number"/>
		
		<!-- Build Label -->
		<property name="build.label" value="${project.name}-${project.version}.${build.number}-${start.DSTAMP}${start.TSTAMP}"/>
		<!-- Get Build Dependencies -->
 		<antcall target="getDependencies" />
		<!-- Cleanup + Init -->
		<delete dir="${dir.build}" />
		<mkdir dir="${dir.build}"/>
		<chmod file="${dir.build}/**" perm="og+wrs" type="both" />
		<!-- Mark as init -->
		<property name="src.isInit" value="true" />
	</target>
	
	<!-- Build Project -->
	<target name="build" depends="init,run-tests,run-docker-tests" description="Build the project">
		<!-- Copy build ID -->
		<concat destfile="${dir.build}/${build.label}">Built on ${start.TODAY}</concat>
		
		<!-- Copy src -->	
      	<copy todir="${dir.build}" encoding="UTF-8">
        	<fileset dir="modules/${module.name}" />
        </copy>
        <!-- Copy readme -->
        <copy todir="${dir.build}" encoding="UTF-8" file="readme.md" overwrite="true" />
        
        <!-- Replace Version + Build Numbers -->
		<replaceregexp match='@version.number@' replace="${project.version}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		<replaceregexp match='@build.number@' replace="${build.number}" flags="ig" byline="true" encoding="UTF-8">
		  <fileset dir="${dir.build}" />
		</replaceregexp>
		
        <!-- Api Docs -->
		<antcall target="build.apidocs" />
        
        <!-- Zip Project -->
		<zip destfile="${dir.exports}/${project.name}-${project.version}.zip" basedir="${dir.build}"></zip>
		
		<!-- Build Checksums -->
		<checksum forceoverwrite="true" fileext=".md5">
			<fileset dir="${dir.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		<checksum forceoverwrite="true" algorithm="SHA-512" fileext=".sha512">
			<fileset dir="${dir.exports}">
				<include name="*.zip" />
			</fileset>
		</checksum>
		
		<!-- Create Box Repo From macrodef -->
		<box-repo location="${dir.artifacts}/${project.name}" 
				  artifactID="${project.name}" 
				  buildID="${build.number}"
				  groupID="${groupID}"
				  latest="${project.version}"
				  classifiers="apidocs"/>

		<!-- Copy over box.json to root for convenience -->
		<copy todir="${dir.exports}" file="${dir.build}/box.json" overwrite="true" encoding="UTF-8" />
				  
		<!-- Cleanup -->
		<delete dir="${dir.build}" />
	</target>
	
	<!-- Build API Docs -->
 	<target name="build.apidocs" description="Builds the api docs" depends="init">
 		<!-- Create API apidocs dir -->
 		<mkdir dir="${dir.api}"/>
 		<!-- Install dependencies for docs -->
		<exec executable="box" dir="${dir.apidocs}">
			<arg line="install --force" />
		</exec>
		<!-- Startup the apidocs server, wait for a few seconds for server to start -->
		<exec executable="box" dir="${dir.apidocs}">
			<arg line="server start openbrowser=false --force port=${apidocs.port}" />
		</exec>
		<sleep seconds="5"/>
		<!-- Get the apidocs now -->
		<get dest="${dir.build}/docbox.html" 
			 src="${url.apidocs}?version=${project.version}&amp;path=${dir.api}" 
			 verbose="true"
			 retries="5"/>
		<!-- stop server -->
		<exec executable="box" dir="${dir.apidocs}">
			<arg line="server stop" />
		</exec>
		<!-- Zip API Docs -->
		<zip destfile="${dir.exports}/${project.name}-apidocs-${project.version}.zip" basedir="${dir.api}"></zip>
 	</target>
	
	<!-- Run Tests For Platform -->
    <target name="run-tests" description="Run TestBox Tests" depends="init">
    	<echo>Running Tests for ${project.name}</echo>
    	<!-- Determine Test target: Are we jenkins or local or travis -->
        <if>
			<not><equals arg1="${environment}" arg2="auto" /></not>
			<then>
				<property name="test.target" value="run" />
			</then>
			<else>
				<property name="test.target" value="run-junit" />
			</else>
		</if>
    	<!-- Run for Core -->
    	<subant target="${test.target}">
          	<fileset dir="tests" includes="test.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>
    </target>

     <!-- Test for Docker Availability -->
    <property environment="env" /> 
	<available file="docker-compose" filepath="${env.PATH}" property="docker.present"/>

	<!-- Docker Tests for Different Engines -->
    <target name="run-docker-tests" description="Run Docker Container Tests" depends="init" if="docker.present">
		<!-- Lucee 5 Tests -->
		<property name="test.targetL5" value="runLucee5" />
		<subant target="${test.targetL5}">
          	<fileset dir="tests" includes="test.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>

        <!-- ACF11 -->
        <property name="test.targetACF11" value="runACF11" />
		<subant target="${test.targetACF11}">
          	<fileset dir="tests" includes="test.xml"/>
    		<property name="environment" value="${environment}" />
        </subant>
    </target>
    
    <!-- Get Dependencies -->
	<target name="getDependencies" description="Get all the necessary dependencies for the build process">
		<!-- Install dependencies for project -->
		<exec executable="box" dir="${basedir}">
			<arg line="install" />
		</exec>
	</target>

</project>
